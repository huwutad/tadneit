const { MessageEmbed, MessageActionRow, MessageButton } = require('discord.js');
module.exports = async (client, interaction) => {
    const status = queue =>
        `√Çm l∆∞·ª£ng: \`${queue.volume}%\` | Filter: \`${queue.filters.join(', ') || 'T·∫Øt‚ùå'
        }\` | L·∫∑p l·∫°i: \`${queue.repeatMode
            ? queue.repeatMode === 2
                ? 'H√†ng ch·ªù üéº'
                : 'M·ªôt b√†i üé∂'
            : 'T·∫Øt‚ùå'
        }\` | T·ª± ƒë·ªông ph√°t: \`${queue.autoplay ? 'B·∫≠t‚úÖ' : 'T·∫Øt‚ùå'}\``
    async function error(error) {
        const lomao2 = new MessageEmbed()
            .setColor('RED')
            .setDescription(`\`‚ùå\` | ${error}`)
        const ·∫ªr·ªè = await interaction.followUp({ embeds: [lomao2], ephemeral: true })
        setTimeout(() => {
            ·∫ªr·ªè.delete()
        }, 5000)
    }

    async function success(success) {
        const thanhcong2 = new MessageEmbed()
            .setColor('GREEN')
            .setDescription(`\`‚úÖ\` | ${success}`)
        const tc = await interaction.followUp({ embeds: [thanhcong2], ephemeral: true })
        setTimeout(() => {
            tc.delete()
        }, 5000)
    }
    client.distube
        .on('playSong', async (queue, song, message) => {
            const play = new MessageEmbed()
                .setTitle(`üé∂${song.name}üé∂`)
                .setURL(song.url)
                .setColor(`RANDOM`)
                .setAuthor(`B√†i h√°t ƒëang ƒë∆∞·ª£c ph√°t......`, 'https://c.tenor.com/sce9SDRey4EAAAAi/disc.gif')
                .setDescription(`${status(queue)}`)
                .setThumbnail(song.thumbnail)
                .addField(`Th·ªùi l∆∞·ª£ng ‚è≤:`, `${song.formattedDuration}`)
                .addField('Ng∆∞·ªùi ƒëƒÉng t·∫£i ü§ò:', `[${song.uploader.name}](${song.uploader.url})`, true)
                .addField('L∆∞·ª£t xem üëÄ:', `\`${song.views.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")}\``, true)
                .addField('L∆∞·ª£t th√≠ch üëç:', `\`${song.likes.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")}\``, true)
                .addField(`ƒê∆∞·ª£c y√™u c·∫ßu b·ªüi üí°:`, `${song.user} ‚úÖ`)
                .setTimestamp()
            const row = new MessageActionRow()
                .addComponents(
                    new MessageButton()
                        .setCustomId('pause')
                        .setLabel('‚è∏')
                        .setStyle('PRIMARY'),
                    new MessageButton()
                        .setCustomId('skip')
                        .setLabel('‚è©')
                        .setStyle('PRIMARY'),

                    new MessageButton()
                        .setCustomId('loop')
                        .setLabel('üîÅ')
                        .setStyle('PRIMARY'),
                );
            const row2 = new MessageActionRow()
                .addComponents(
                    new MessageButton()
                        .setCustomId('volumeDown')
                        .setLabel('üîâ')
                        .setStyle('PRIMARY'),

                    new MessageButton()
                        .setCustomId('volumeUp')
                        .setLabel('üîä')
                        .setStyle('PRIMARY'),
                )
            const huylmao = await queue.textChannel.send({ embeds: [play], components: [row] })

            function huylomao() {
                setTimeout(() => {
                    const play2 = new MessageEmbed()
                        .setTitle(`üé∂${song.name}üé∂`)
                        .setURL(song.url)
                        .setColor(`RANDOM`)
                        .setAuthor(`B√†i h√°t ƒëang ƒë∆∞·ª£c ph√°t......`, 'https://c.tenor.com/sce9SDRey4EAAAAi/disc.gif')
                        .setDescription(`${status(queue)}`)
                        .setThumbnail(song.thumbnail)
                        .addField(`Th·ªùi l∆∞·ª£ng ‚è≤:`, `\`${song.formattedDuration}\``)
                        .addField('Ng∆∞·ªùi ƒëƒÉng t·∫£i ü§ò:', `[${song.uploader.name}](${song.uploader.url})`, true)
                        .addField('L∆∞·ª£t xem üëÄ:', `\`${song.views.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")}\``, true)
                        .addField('L∆∞·ª£t th√≠ch üëç:', `\`${song.likes.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")}\``, true)
                        .addField(`ƒê∆∞·ª£c y√™u c·∫ßu b·ªüi üí°:`, `${song.user} ‚úÖ`)
                        .setTimestamp()
                    huylmao.edit({ embeds: [play2], components: [row] })
                    if (queue.currentTime.length == 0) huylmao.delete()
                    huylomao()
                }, 5000);
            }
            huylomao()
        })
    client.distube.on('addSong', async (queue, song) => {
        const addsongembed = new MessageEmbed()
            .setColor(`GREEN`)
            .setDescription(`ƒê√£ th√™m **${song.name}** v√†o h√†ng ch·ªù b·ªüi ${song.user}`)
        queue.textChannel.send({ embeds: [addsongembed] })
        //setTimeout((addsong) => {
        //    d.delete()
        //}, 10000)
    })
    client.distube.on('addList', (queue, playlist, e) => {
        function error(error) {
            const drac = new MessageEmbed()
                .setColor('RED')
                .setDescription(`\`‚ùå\` | ${error}`)
            queue.textChannel.send({ embeds: [drac] })
        }
        if (String(e).search('Error [PlayError]')) return error(`Kh√¥ng t√¨m th·∫•y danh s√°ch ph√°t ƒë√≥!`)
        const addlistembed = new MessageEmbed()
            .setColor(`GREEN`)
            .setDescription(`ƒê√£ th√™m danh s√°ch ph√°t **${playlist.name}** (${playlist.songs.length} b√†i h√°t) v√†o h√†ng ch·ªù `)
        queue.textChannel.send({ embeds: [addlistembed] })
    })
    client.distube.on('error', (textChannel, e) => {
        console.error(e)
        function error(error) {
            const lomao = new MessageEmbed()
                .setColor('RED')
                .setDescription(`\`‚ùå\` | ${error}`)
            textChannel.send({ embeds: [lomao] })
        }
        if (e.errorCode == 'VOICE_MISSING_PERMS') {
            error(`Kh√¥ng th·ªÉ tham gia voice v√¨ thi·∫øu perm \`VOICE_MISSING_PERMS\``)
            return
        }
        error(`ƒê√£ x·∫£y ra l·ªói: ${e} \n B√°o <@!${process.env.OWNER}> ƒë·ªÉ ƒë∆∞·ª£c fix, c·∫£m ∆°n ${process.env.LOVE}`)
    })
    client.distube.on('finishSong', queue => {
        function success(success) {
            const drac = new MessageEmbed()
                .setColor('YELLOW')
                .setDescription(`\`üìõ\` | ${success}`)
            queue.textChannel.send({ embeds: [drac] })
        }
        success(`ƒê√£ h√™t b√†i \`${queue.songs[0].name}\` üò¥`)
    })
    client.distube.on('empty', queue => {
        function success(success) {
            const drac = new MessageEmbed()
                .setColor('RANDOM')
                .setDescription(`${success}`)
            queue.textChannel.send({ embeds: [drac] })
        }
        success(`Kh√¥ng c√≤n ai trong voice channel, tui r·ªùi ƒë√¢y :D`)
    })
    //client.DisTubeOptions.searchSongs > 1
    client.distube.on('searchResult', (message, result) => {
        i = 0
        message.channel.send(
            `**Choose an option from below**\n${result
                .map(
                    song =>
                        `**${++i}**. ${song.name} - \`${song.formattedDuration
                        }\``,
                )
                .join(
                    '\n',
                )}\n*Enter anything else or wait 30 seconds to cancel*`,
        )
    })
    client.distube.on('searchCancel', message =>
        message.channel.send('Searching canceled'),
    )
    client.distube.on('searchInvalidAnswer', message =>
        message.channel.send('Invalid number of result.'),
    )
    client.distube.on('searchNoResult', message =>
        message.channel.send('Kh√¥ng c√≥ k·∫øt qu·∫£ n√†o!'),
    )
}